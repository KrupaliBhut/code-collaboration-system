var mysql = require('mysql2');
var express = require('express');
var app = express();
var utils =require('util')
var bodyParser = require('body-parser');
const ejs = require('ejs');

app.use(bodyParser.urlencoded({ extended: true }));
var connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'job_application'
});
app.set('view engine', 'ejs');
connection.connect();
app.use(bodyParser.json());

app.use(bodyParser.urlencoded({ extended: false }));
const queryExecutor = (query) => {
    return new Promise((resolve, reject) => {
        connection.query(query, (err, result) => {
            resolve(result)
        })
    })
}
app.get('/', async function (req, res) {


    var sql6 = `select * from candidate`;
    connection.query(sql6, function (err, result) {
        if (err) throw err;
        res.render('jobapplication.ejs', { data: result });
    })
})


app.post('/job', async function (req, res) {
    // candidate
    var cfname = req.body.candidatefname;
    var clname = req.body.candidatelname;
    var cemail = req.body.candidate_email;
    var caddress = req.body.candidate_address;
    var ccontact = req.body.candidate_contact;
    var ccity = req.body.ct;
    var cstate = req.body.state;
    var cgender = req.body.gender;
    var czipcode = req.body.zipcode;
    var cdesignation = req.body.designation;
    var crelationship = req.body.relationship;
    var cdob = req.body.dob;

    var sql = `insert into candidate (candidate_fname,candidate_lname,candidate_email,candidate_address,candidate_contact,candidate_city,candidate_state,candidate_gender,zipcode,designation,relationship,candidate_dob)
    values('${cfname}','${clname}','${cemail}','${caddress}','${ccontact}', '${ccity}','${cstate}','${cgender}',${czipcode},'${cdesignation}','${crelationship}','${cdob}')`;

    const result1 = await queryExecutor(sql);
    var ref_id = result1.insertId;
    console.log('candidate record inserted successfully');

    //     academic_master
    var coursename = req.body.course_name;
    var board = req.body.board;
    var percentage = req.body.percentage;
    var passingyear = req.body.passingyear;
    var sql7 = `insert into academic_master (coursename,board,percentage,passingyear,candidate_id) values ('${coursename}','${board}','${percentage}','${passingyear}',' ${ref_id})`;
    // if (typeof (course_name) == "string") {
    //     sql7 += `${coursename}','${board}','${percentage}','${passingyear}',' ${ref_id}')`
    // }
    // else {
    //     for (i = 0; i < coursename.length; i++) {
    //         sql7 += `${coursename[i]}','${board[i]}','${percentage[i]}','${passingyear[i]}','${ref_id}')`
    //         if (i != coursename.length - 1) {
    //             sql7 += `,('`;
    //         }
    //     }
    // }

    // console.log(result);
    console.log(sql7)
    console.log('academic record inserted successfully');
    // experience master
    var companyname = req.body.companyname;
    var position = req.body.company_position;
    var joiningdate = req.body.joining_date;
    var leavingdate = req.body.leaving_date;
    var ctc = req.body.ctc;
    console.log(joiningdate);
    var sql8 = `insert into experience_master (company_name,company_position,joining_date,leaving_date,ctc,candidate_id) values('`;
    if (typeof (companyname) == "string") {
        sql8 += `${companyname}','${position}',' ${joiningdate} ','${leavingdate}','${ctc}','${ref_id}')`
    }
    else {
        for (i = 0; i < companyname.length; i++) {
            sql8 += `${companyname[i]}','${position[i]}',' ${joiningdate[i]} ','${leavingdate[i]}','${ctc[i]}','${ref_id}')`
            if (i != companyname.length - 1) {
                sql8 += `,('`;
            }
        }
    }

    // console.log(result);
    console.log('experience record inserted successfully');
    // reference master
    var refname = req.body.ref_name;
    var refcontact = req.body.ref_contact;
    var refemail = req.body.ref_email;

    var sql9 = `insert into reference_master (ref_name,ref_contact,ref_email,ref_createdate,candidate_id)
            values('${refname}','${refcontact}','${refemail}',NOW(),${ref_id})`;

    // console.log(result);
    console.log('reference record inserted successfully');
    // language master
    var c_lan = req.body.c_lan;
    console.log(c_lan);

    for (k = 0; k < c_lan.length; k++) {
        var c_all = req.body[c_lan[k]];
        var sql11 = `insert into language_master (l_name,l_value,l_createdate,candidate_id)
                values('${c_lan[k]}','${c_all}', NOW(), ${ref_id})`;

        console.log(sql11);
        // console.log(result);
        console.log('language record inserted successfully');
    }

    // technology master
    var c_tech = req.body.c_tech;
    console.log(c_tech);
    for (l = 0; l < c_tech.length; l++) {
        var c_alltech = req.body[c_tech[l]];
        var sql12 = `insert into technologies_master (tech_name ,tech_value,tech_createdate,candidate_id) 
            values('${c_tech[l]}','${c_alltech}',NOW(),${ref_id})`;

        console.log(sql12);
        // console.log(result);
        console.log('technologies record inserted successfully');
    }

    // location master
    var plocation = req.body.p_location;
    var pnoticeperiod = req.body.p_noticenotic;
    var pexpactedctc = req.body.p_expactedctc;
    var pcurrentctc = req.body.p_currentctc;
    var pdepartment = req.body.p_department;
    var sql10 = `insert into preferance_master (p_location,p_noticeperiod,p_expactedctc,p_currentctc,p_department,p_createdate,candidate_id)values('${plocation}',${pnoticeperiod},${pexpactedctc},${pcurrentctc},'${pdepartment}',NOW(),${ref_id})`;


    console.log('preferance record inserted successfully');
    const result2 = await queryExecutor(sql7);
    const result3 = await queryExecutor(sql8);
    const result4 = await queryExecutor(sql9);
    const result5 = await queryExecutor(sql11);
    const result6 = await queryExecutor(sql12);
    const result7 = await queryExecutor(sql10);
    var sql11 = `select * from candidate`;

    const result8 = await queryExecutor(sql11);

    res.render('jobapplication1.ejs', { data: result8 });
});



var resultcombo = [];
app.get('/job', (req, res) => {
    // relationship
    var sql2 = `select option_key from option_master where select_id=1`;
    connection.query(sql2, (err, result) => {
        if (err) throw err;
        resultcombo[0] = result;
        // console.log( resultcombo[0]);
    })
    // state
    var state_ans;
    var state = `select * from state_master`;
    connection.query(state, function (err, result) {
        if (err) throw err;
        state_ans = result;
    })

    var sql3 = `select option_key from option_master where select_id=2`;

    connection.query(sql3, (err, result1) => {

        if (err) throw err;

        resultcombo[1] = result1;

        console.log("abc" + resultcombo[1]);

    })

    var sql4 = `select option_key from option_master where select_id=3`;
    connection.query(sql4, (err, result2) => {

        if (err) throw err;
        resultcombo[2] = result2;
        // console.log(resultcombo[2]);
    })
    var sql5 = `select option_key from option_master where select_id=4`;
    connection.query(sql5, (err, result3) => {
        if (err) throw err;
        resultcombo[3] = result3;
    })
    var sql6 = 'select option_key from option_master where select_id=5 ';
    connection.query(sql6, (err, result4) => {
        if (err) throw err;
        resultcombo[4] = result4;
        console.log(resultcombo[4]);
    })
    var sql7 = 'select option_key from option_master where select_id=6 ';
    connection.query(sql7, (err, result5) => {
        if (err) throw err;
        resultcombo[5] = result5;
    })
    var sql8 = 'select option_key from option_master where select_id=7 ';
    connection.query(sql8, (err, result6) => {
        if (err) throw err;
        resultcombo[6] = result6;
    })
    var sql9 = 'select option_key from option_master where select_id=8 ';
    connection.query(sql9, (err, result7) => {
        if (err) throw err;
        resultcombo[7] = result7;
        // for city and state

        res.render('jobapplication.ejs', { data: resultcombo, state_ans });
    })
});




app.post('/search', function (req, res) {
    str = req.body.search;
    // sign = req.query.sign;
    // console.log(sign);
    console.log(str);
    let symbol = ['$', '&', '#', '~', '@'];
    let newStr = '';

    var count = 0;

    for (var i = 0; i < str.length; i++) {

        if (symbol.includes(str[i])) {
            newStr += " " + str[i];
            count++;
        } else {
            newStr += str[i];
        }
    }

    var splitarr = newStr.split(' ');
    console.log(splitarr);
    var queryans = 'where';

    for (var j = 0; j < splitarr.length; j++) {

        if (splitarr[j][0] == '$') {

            count--;
            if (count) {
                queryans += ` candidate_fname LIKE '${splitarr[j].substring(1)}%'
and`
            } else {
                queryans += ` candidate_fname LIKE '${splitarr[j].substring(1)}%'
`
            }
        }


        if (splitarr[j][0] == '&') {

            count--;
            if (count) {
                queryans += ` candidate_lname LIKE '${splitarr[j].substring(1)}%'
and`
            } else {
                queryans += ` candidate_lname LIKE '${splitarr[j].substring(1)}%'
`
            }
        }


        if (splitarr[j][0] == '#') {

            count--;
            if (count) {
                queryans += ` candidate_email LIKE '${splitarr[j].substring(1)}%'
and`
            } else {
                queryans += ` candidate_email LIKE '${splitarr[j].substring(1)}%'
`
            }
        }


        if (splitarr[j][0] == '~') {

            count--;
            if (count) {
                queryans += ` candidate_contact LIKE
'${splitarr[j].substring(1)}%' and`
            } else {
                queryans += ` candidate_contact LIKE
'${splitarr[j].substring(1)}%' `
            }
        }

        if (splitarr[j][0] == '@') {

            count--;
            if (count) {
                queryans += ` candidate_city LIKE
'${splitarr[j].substring(1)}%' and`
            } else {
                queryans += ` candidate_city LIKE
'${splitarr[j].substring(1)}%' `
            }
        }
    }


    console.log(queryans);

    connection.query(`select * from candidate ${queryans};`, (err,
        result8) => {
        console.log(result8);
        let can = result8;

        connection.query(`select * from state_master`, (err, result9) => {
            console.log(result9);
        })
        res.render('jobapplication1.ejs', { data: result9, can });
    })

});
app.get('/changecity', (req, res) => {

    var id = req.query.state_id
    console.log(id);
    var city = `select city_value from city_master where state_id =${id}`;
    connection.query(city, function (err, result) {
        if (err) return console.log(err);
        res.json(result);
    })
})

app.get('/show', (req, res) => {
    var sql13 = `select * from candidate where candidate_id != 1`;
    connection.query(sql13, (err, result) => {
        if (err) throw err;
        // console.log(result);
        res.render('jobapplication1.ejs', { data: result });
    })
})
app.get('/delete', (req, res) => {
    var id = req.query.id;
    console.log(id);
    var sql14 = `update candidate set isdeleted= 1 where candidate_id='${id}'`;
    // var sql14= `delete from candidate where candidate_id=${id}`;
    connection.query(sql14, (err, result) => {
        if (err) throw err;
        console.log(err);
        console.log(result);
        res.redirect('/show');
    })
})
app.get("/deleterecord", (req, res) => {
    var candidate_id = req.query.candidate_id;

    connection.query(`update candidate set isdeleted= 1 where candidate_id in (${candidate_id})`, (err, result) => {
        if (err) throw err;

    })
})
// async function show()
// {
//     var id = req.query.id;

//     var sql = ` select option_key from option_master where select_id =${id}`;
//     var result = await queryExecutor(sql);
//     res.render('updatejobapplication.ejs',{data:result,state_ans,data});

// }
var store = [];
app.get('/update', async (req, res) => {
    var id = req.query.id;
    var fname = req.query.candidate_fname;
    var lname = req.query.candidate_lname;
    var email = req.query.candidate_email;
    var contact = req.query.candidate_contact;

    var candidate = await queryExecutor(`select * from candidate where candidate_id='${id}'`);
    var academic_master = await queryExecutor(`select * from academic_master where candidate_id='${id}'`);
    var experience_master = await queryExecutor(`select * from experience_master where candidate_id='${id}'`);
    var reference_master = await queryExecutor(`select * from reference_master where candidate_id='${id}'`);
    var language_master = await queryExecutor(`select * from language_master where candidate_id = '${id}'`);
    var technologies_master = await queryExecutor(`select * from technologies_master where candidate_id = '${id}'`);
    var preferance_master = await queryExecutor(`select * from preferance_master where candidate_id = '${id}'`);
    console.log(candidate);
    console.log(academic_master);
    console.log("exp", experience_master);
    console.log(reference_master);
    console.log(language_master);
    console.log(technologies_master);
    console.log(preferance_master);

    var data = new Array();
    var result = await queryExecutor(`select option_key from option_master where select_id=1`);
    data.push(result);

    var res2 = await queryExecutor(`select option_key from option_master where select_id=2`);
    data.push(res2);

    var res3 = await queryExecutor(`select option_key from option_master where select_id=3`);
    data.push(res3)
    var res4 = await queryExecutor(`select option_key from option_master where select_id=4`);

    data.push(res4)
    var res5 = await queryExecutor(`select option_key from option_master where select_id=5`);
    data.push(res5)

    var res6 = await queryExecutor(`select option_key from option_master where select_id=6`);

    data.push(res6)
    var res7 = await queryExecutor(`select option_key from option_master where select_id=7`);
    data.push(res7)

    var res8 = await queryExecutor(`select option_key from option_master where select_id=8`);
    data.push(res8)

    var state_ans;
    var state = `select * from state_master`;

    state_ans = state;
    console.log(state_ans);
console.log(preferance_master)
    res.render('updatejobapplication.ejs', { data: store, data, candidate, academic_master, experience_master, reference_master, language_master, technologies_master, preferance_master, state_ans, candidate })
    // res.render('updatejobapplication.ejs',{data:store,candidate,candidate1,state_ans});
})


var qu = utils.promisify(connection.query).bind(connection);
app.post('/update', async (req,res)=>{
    var id = req.body.hide;
    console.log(id);
    var cfname = req.body.candidate_fname;
    var clname = req.body.candidate_lname;
    console.log(cfname);
    var cemail = req.body.candidate_email;
    var caddress = req.body.candidate_address;
    var ccontact = req.body.candidate_contact;
    var ccity = req.body.ct;
    var cstate = req.body.state;
    var cgender = req.body.gender;
    var czipcode = req.body.zipcode;
    var cdesignation = req.body.designation;
    var crelationship = req.body.relationship;
    var cdob = req.body.dob;

    var sql = await`update candidate set candidate_fname='${cfname}',candidate_lname='${clname}',candidate_email='${cemail}',candidate_address ='${caddress}',candidate_contact = '${ccontact}',candidate_city = '${ccity}',candidate_state = '${cstate}', candidate_gender = '${cgender}',zipcode = '${czipcode}',designation = '${cdesignation}',relationship = '${crelationship}',candidate_dob = '${cdob}' where candidate_id='${id}'`;
    var result =await qu(sql);
    
   
    var coursename = req.body.coursename;
    var board = req.body.board;
    var percentage = req.body.percentage;
    var passingyear = req.body.passingyear;

        var sql2 = await `update academic_master set coursename='${coursename}',board='${board}',percentage='${percentage}',passingyear='${passingyear}' where candidate_id='${id}'`; 
        var result2 = await qu(sql2);




    res.render('show' ,{ result,result2})
    // connection.query(sql, (err,result)=>{
    //     if (err) throw err;
    //     res.render('show.ejs',{data:result})
    // })
    // console.log('data updated...!');
});

app.listen(3000, function () {
    console.log('Server is running on port 3000');
});


